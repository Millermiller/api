<?php

namespace DoctrineProxies\__CG__\Scandinaver\User\Domain;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \Scandinaver\User\Domain\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'id', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'login', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'email', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'activeTo', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'planId', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'name', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'photo', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'restoreLink', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'active', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'role', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'assetsOpened', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'assetsCreated', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'createdAt', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'deletedAt', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'updatedAt', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'lastOnline', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'plan', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'assets', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'puzzles', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'texts', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'posts', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'results', 'password', 'rememberToken', 'accessToken'];
        }

        return ['__isInitialized__', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'id', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'login', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'email', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'activeTo', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'planId', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'name', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'photo', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'restoreLink', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'active', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'role', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'assetsOpened', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'assetsCreated', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'createdAt', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'deletedAt', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'updatedAt', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'lastOnline', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'plan', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'assets', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'puzzles', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'texts', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'posts', '' . "\0" . 'Scandinaver\\User\\Domain\\User' . "\0" . 'results', 'password', 'rememberToken', 'accessToken'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKey', []);

        return parent::getKey();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(int $id): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(?string $name): \Scandinaver\User\Domain\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlan(): \Scandinaver\User\Domain\Plan
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlan', []);

        return parent::getPlan();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlan(\Scandinaver\User\Domain\Plan $plan): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlan', [$plan]);

        parent::setPlan($plan);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssets()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssets', []);

        return parent::getAssets();
    }

    /**
     * {@inheritDoc}
     */
    public function setAssets($assets): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAssets', [$assets]);

        parent::setAssets($assets);
    }

    /**
     * {@inheritDoc}
     */
    public function getTexts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTexts', []);

        return parent::getTexts();
    }

    /**
     * {@inheritDoc}
     */
    public function setTexts($texts): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTexts', [$texts]);

        parent::setTexts($texts);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogin', []);

        return parent::getLogin();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogin(string $login): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogin', [$login]);

        parent::setLogin($login);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): \Carbon\Carbon
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(string $createdAt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail(string $email): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function isAdmin(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAdmin', []);

        return parent::isAdmin();
    }

    /**
     * {@inheritDoc}
     */
    public function getAssetsOpened(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssetsOpened', []);

        return parent::getAssetsOpened();
    }

    /**
     * {@inheritDoc}
     */
    public function setAssetsOpened(?int $assetsOpened): \Scandinaver\User\Domain\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAssetsOpened', [$assetsOpened]);

        return parent::setAssetsOpened($assetsOpened);
    }

    /**
     * {@inheritDoc}
     */
    public function getAssetsCreated(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAssetsCreated', []);

        return parent::getAssetsCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setAssetsCreated(?int $assetsCreated): \Scandinaver\User\Domain\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAssetsCreated', [$assetsCreated]);

        return parent::setAssetsCreated($assetsCreated);
    }

    /**
     * {@inheritDoc}
     */
    public function hasPhoto(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasPhoto', []);

        return parent::hasPhoto();
    }

    /**
     * {@inheritDoc}
     */
    public function getPhoto(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhoto', []);

        return parent::getPhoto();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhoto(?string $photo): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhoto', [$photo]);

        parent::setPhoto($photo);
    }

    /**
     * {@inheritDoc}
     */
    public function jsonSerialize(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'jsonSerialize', []);

        return parent::jsonSerialize();
    }

    /**
     * {@inheritDoc}
     */
    public function getActiveTo(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActiveTo', []);

        return parent::getActiveTo();
    }

    /**
     * {@inheritDoc}
     */
    public function setActiveTo(string $activeTo): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActiveTo', [$activeTo]);

        parent::setActiveTo($activeTo);
    }

    /**
     * {@inheritDoc}
     */
    public function isPremium(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPremium', []);

        return parent::isPremium();
    }

    /**
     * {@inheritDoc}
     */
    public function getAvatar()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAvatar', []);

        return parent::getAvatar();
    }

    /**
     * {@inheritDoc}
     */
    public function getActive(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', []);

        return parent::getActive();
    }

    /**
     * {@inheritDoc}
     */
    public function addPuzzle(\Scandinaver\Puzzle\Domain\Puzzle $puzzle): \Scandinaver\User\Domain\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPuzzle', [$puzzle]);

        return parent::addPuzzle($puzzle);
    }

    /**
     * {@inheritDoc}
     */
    public function hasPuzzle(\Scandinaver\Puzzle\Domain\Puzzle $puzzle): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasPuzzle', [$puzzle]);

        return parent::hasPuzzle($puzzle);
    }

    /**
     * {@inheritDoc}
     */
    public function addAsset(\Scandinaver\Learn\Domain\Asset $asset): \Scandinaver\User\Domain\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAsset', [$asset]);

        return parent::addAsset($asset);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAsset(\Scandinaver\Learn\Domain\Asset $asset): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAsset', [$asset]);

        return parent::hasAsset($asset);
    }

    /**
     * {@inheritDoc}
     */
    public function hasText(\Scandinaver\Translate\Domain\Text $text): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasText', [$text]);

        return parent::hasText($text);
    }

    /**
     * {@inheritDoc}
     */
    public function incrementAssetCounter(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'incrementAssetCounter', []);

        parent::incrementAssetCounter();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlanId(int $planId): \Scandinaver\User\Domain\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlanId', [$planId]);

        return parent::setPlanId($planId);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosts', []);

        return parent::getPosts();
    }

    /**
     * {@inheritDoc}
     */
    public function setPosts($posts): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosts', [$posts]);

        parent::setPosts($posts);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthIdentifierName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthIdentifierName', []);

        return parent::getAuthIdentifierName();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthIdentifier', []);

        return parent::getAuthIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthPassword', []);

        return parent::getAuthPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function getRememberToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRememberToken', []);

        return parent::getRememberToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setRememberToken($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRememberToken', [$value]);

        return parent::setRememberToken($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getRememberTokenName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRememberTokenName', []);

        return parent::getRememberTokenName();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmailForPasswordReset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmailForPasswordReset', []);

        return parent::getEmailForPasswordReset();
    }

    /**
     * {@inheritDoc}
     */
    public function sendPasswordResetNotification($token)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'sendPasswordResetNotification', [$token]);

        return parent::sendPasswordResetNotification($token);
    }

    /**
     * {@inheritDoc}
     */
    public function clients()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clients', []);

        return parent::clients();
    }

    /**
     * {@inheritDoc}
     */
    public function tokens()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'tokens', []);

        return parent::tokens();
    }

    /**
     * {@inheritDoc}
     */
    public function token()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'token', []);

        return parent::token();
    }

    /**
     * {@inheritDoc}
     */
    public function tokenCan($scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'tokenCan', [$scope]);

        return parent::tokenCan($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function createToken($name, array $scopes = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createToken', [$name, $scopes]);

        return parent::createToken($name, $scopes);
    }

    /**
     * {@inheritDoc}
     */
    public function withAccessToken($accessToken)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'withAccessToken', [$accessToken]);

        return parent::withAccessToken($accessToken);
    }

    /**
     * {@inheritDoc}
     */
    public function notify($instance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notify', [$instance]);

        return parent::notify($instance);
    }

    /**
     * {@inheritDoc}
     */
    public function notifyNow($instance, array $channels = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notifyNow', [$instance, $channels]);

        return parent::notifyNow($instance, $channels);
    }

    /**
     * {@inheritDoc}
     */
    public function routeNotificationFor($driver, $notification = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'routeNotificationFor', [$driver, $notification]);

        return parent::routeNotificationFor($driver, $notification);
    }

    /**
     * {@inheritDoc}
     */
    public function findForPassport($userIdentifier)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'findForPassport', [$userIdentifier]);

        return parent::findForPassport($userIdentifier);
    }

}
